@page "/fetchdata"
@inherits MvvmOwningComponentBase<FetchDataViewModel>
@inject PersistentComponentState State

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (ViewModel.WeatherForecasts == null)
{
    <p aria-label="loading"><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in ViewModel.WeatherForecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    private PersistingComponentStateSubscription _persistingSubscription;

    protected override async Task OnInitializedAsync()
    {
        _persistingSubscription = State.RegisterOnPersisting(() => ViewModel.PersistStateAsync(State));
        await ViewModel.LoadStateAsync(State);

        await base.OnInitializedAsync();
    }

    protected override void Dispose(bool disposing)
    {
        if (IsDisposed)
        {
            return;
        }

        if (disposing)
        {
            _persistingSubscription.Dispose();
        }

        base.Dispose(disposing);
    }
}

